from textblob import TextBlob
from textblob.classifiers import NaiveBayesClassifier
import nltk
import re
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
from sklearn.model_selection import cross_val_predict
from csvpackage import CreateCSVFile as csv
from database import DataBase as db


def TranslateTwitter(twitter):
    try:
        blob = TextBlob(twitter)
        return blob.translate(to='en-US')
    except:
        return ''
def TwitterAnalyze(twitter):
    tweetMod = TextBlob(str(twitter))
    return tweetMod.sentiment_assessments

def ClassificarFrase(frase, texto):
    feeling = ['positivo','negativo','neutro']
    print('********************************************************************************************************************\n')
    print('O texto pesquisado foi: ' + texto)
    print('\n********************************************************************************************************************\n')
    print(frase + '\n1 - Positivo\n2 - Negativo \n3 - Neutro\n')
    f = int(input())
    print('********************************************************************************************************************\n')
    return feeling[f-1]

def TrataTexto(texto, twitterSearch):
    texto = (str(re.sub('(?:https?|ftp):\/\/[\n\S]+', '', texto, flags=re.IGNORECASE)))
    pattern = re.compile(twitterSearch, re.IGNORECASE)
    texto = pattern.sub('', texto)
    return texto

def Training():
    try:
        lista = []
        for twitter in db.GetAllTwitter():
            result = {}
            if(db.ExistsTwitterTraining(twitter['_id'])):
                continue;
            result = twitter
            result['textoAnalise'] = TrataTexto(twitter['texto'], twitter['textSearch'])
            result['feeling'] = ClassificarFrase(result['texto'], twitter['textSearch'])
            lista.append(result)
        db.SaveTraining(lista)
    except Exception as e:
        print('Error: {0}'.format(e))


def SentimentAnalysis(list):
    try:
        indice = (len(list) * 80)//100
        train_set = list[0:indice-1]
        test_set = list[indice:len(list)-1]

        cl = NaiveBayesClassifier(train_set)
        accuracy = cl.accuracy(test_set)
        twitters = db.GetAllTwitterTitulo()
        lista = []
        for twitter in twitters:
            result = {}
            if (db.ExistsTwitterFeeling(twitter['_id'])):
                continue;
            result =twitter
            frase = twitter['texto']
            blob = TextBlob(frase, classifier=cl)
            result['feeling'] = blob.classify()
            result['accuracy'] = accuracy
            lista.append(result)
        db.SaveFeeling(lista)
    except Exception as e:
        print('Error: {0}'.format(e))
        # print('\n********************************************************************************************************************\n')
        # print(frase)
        # print('Esta frase é de caráter: {}'.format(blob.classify()))
        # print('Precisão da previsão: {}'.format(accuracy))


def main():
    SentimentAnalysis(db.GetTrainingTwitter())
    #Training()

if __name__ == '__main__':
    main()