from textblob import TextBlob
from textblob.classifiers import NaiveBayesClassifier
import nltk
import re
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer

from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
from sklearn.model_selection import cross_val_predict
from csvpackage import CreateCSVFile as csv
from database import DataBase as db


def TranslateTwitter(twitter):
    try:
        blob = TextBlob(twitter)
        return blob.translate(to='en-US')
    except:
        return ''
def TwitterAnalyze(twitter):
    tweetMod = TextBlob(str(twitter))
    return tweetMod.sentiment_assessments

def ClassificarFrase(frase, texto):
    feeling = ['positivo','negativo','neutro']
    print('********************************************************************************************************************\n')
    print('O texto pesquisado foi: ' + texto)
    print('\n********************************************************************************************************************\n')
    print(frase + '\n1 - Positivo\n2 - Negativo \n3 - Neutro\n5 - Apagar\n')
    f = int(input())
    if f == 5:
        return '5'
    print('********************************************************************************************************************\n')
    return feeling[f-1]

def TrataTexto(texto, twitterSearch):
    texto = (str(re.sub('(?:https?|ftp):\/\/[\n\S]+', '', texto, flags=re.IGNORECASE)))
    pattern = re.compile(twitterSearch, re.IGNORECASE)
    texto = pattern.sub('', texto)
    return texto

def Training():

        lista = []
        for twitter in db.GetAllTwitter():
            result = {}
            if(db.ExistsTwitterTraining(twitter['_id'])):
                continue;
            result = twitter
            result['textoAnalise'] = TrataTexto(twitter['texto'], twitter['textSearch'])
            retorno = ClassificarFrase(result['texto'], twitter['textSearch'])
            try:
                if retorno == '5':
                    db.RemoveTwitter(twitter['_id'])
                    continue
                result['feeling'] = retorno
                db.SaveTraining(result)
            except Exception as e:
                print('Error: {0}'.format(e))
                continue


def SentimentAnalysis(list):
    try:
        tweets = []
        classes = []
        for item in list:
            tweets.append(item[0])
            classes.append(item[1])
        vectorizer = CountVectorizer(analyzer="word")
        freq_tweets = vectorizer.fit_transform(tweets)
        modelo = MultinomialNB()
        modelo.fit(freq_tweets, classes)

        twitters = db.GetAllTwitterTitulo()
        twitterList = []
        listTwitter = []
        for item in twitters:
            listTwitter.append(item['texto'])
            twitterList.append(item)
        resultados = cross_val_predict(modelo, freq_tweets, classes, cv=10)
        sentimento = ['positivo', 'negativo', 'neutro']
        print(metrics.accuracy_score(classes, resultados))
        freq_testes = vectorizer.transform(listTwitter)
        feeling = modelo.predict(freq_testes)
        lista = []
        i = 0
        for twitter in twitterList:
            result = {}
            if (db.ExistsTwitterFeeling(twitter['_id'])):
                continue;
            result = twitter
            result['feeling'] = feeling[i]
            lista.append(result)
            i+=1
        db.SaveFeeling(lista)
    except Exception as e:
        print('Error: {0}'.format(e))
        # print('\n********************************************************************************************************************\n')
        # print(frase)
        # print('Esta frase é de caráter: {}'.format(blob.classify()))
        # print('Precisão da previsão: {}'.format(accuracy))

def SaveTraining():
    dataset = pd.read_csv('C:\\TccResult\\tweets.csv')
    tweets = dataset['Text'].values
    classes = dataset['Classificacao'].values
    i=0
    lista = []
    for tweet in tweets:
        item = {}
        item['textoAnalise'] = tweet
        item['feeling'] = classes[i]
        lista.append(item)
        i += 1
    db.SaveFeeling2(lista)


def main():
    SentimentAnalysis(db.GetTrainingTwitter())
    #Training()
    #SaveTraining()

if __name__ == '__main__':
    main()